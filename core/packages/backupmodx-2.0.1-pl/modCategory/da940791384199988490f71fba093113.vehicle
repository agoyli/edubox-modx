<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Chunks' => 
    array (
      '31557f932f75c7a8c80c2e3a3139fb00' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"backupMODXWidget","description":"Chunk","editor_type":0,"category":0,"cache_type":0,"snippet":"<link rel=\\"stylesheet\\" type=\\"text\\/css\\" href=\\"[[++site_url]][[+assetsurl]]components\\/backupmodx\\/css\\/widget.css\\" \\/>\\n\\n<form class=\\"hide\\" method=\\"post\\" action=\\"\\" id=\\"backupmodx-form-download\\">\\n\\t<h3 style=\\"color:grey\\">Backup Finished!<\\/h3>\\n\\t<p>Download:<\\/p>\\n\\t<div class=\\"backupmodxWidget__downloads\\" id=\\"backupmodx-download-container\\"><\\/div>\\n\\t<input class=\\"x-btn x-btn-small x-btn-icon-small-left primary-button x-btn-noicon\\" type=\\"submit\\" name=\\"removebackupmodx\\" value=\\"Remove Backup\\">\\n    <a class=\\"backupmodxWidget__restoreLink\\" onclick=\\"restoreBackupModx();\\">Restore a Backup<\\/a>\\n<\\/form>\\n\\n<form class=\\"hide\\" method=\\"post\\" action=\\"\\" id=\\"backupmodx-form-restore\\">\\n\\t<p>Restore Backup:<\\/p>\\n    <div class=\\"backupmodxWidget__restore\\" id=\\"backupmodx-restore-container\\"><\\/div>\\n    <input class=\\"x-btn x-btn-small x-btn-icon-small-left primary-button x-btn-noicon\\" type=\\"submit\\" name=\\"restorebackupmodx\\" value=\\"Restore Backup!\\">\\n    <a href=\\"?\\" class=\\"backupmodxWidget__restoreLink\\">Cancel<\\/a>\\n<\\/form>\\n\\n<div id=\\"backupmodx-spinner\\" class=\\"backupmodxSpinner__wrapper hide\\">\\n    <div class=\\"backupmodxSpinner\\">\\n        <i class=\\"icon icon-modx backupmodxSpinner__icon\\"><\\/i>\\n        <i class=\\"icon icon-modx backupmodxSpinner__icon\\"><\\/i>\\n        <i class=\\"icon icon-modx backupmodxSpinner__icon\\"><\\/i>\\n    <\\/div>\\n    <center>\\n        <h3>Backup MODX<\\/h3>\\n        <p>Backup is in progress.<\\/p>\\n    <\\/center>\\n<\\/div>\\n\\n\\n<form onsubmit=\\"event.preventDefault(); backupMODX();\\" id=\\"backupmodx-form-backup\\">\\n\\t<p>Backup your MODX-Site:<\\/p>\\n\\t<label class=\\"backupmodxWidget__selectBox\\">\\n\\t    <input type=\\"checkbox\\" name=\\"files\\" value=\\"1\\" id=\\"backupmodx-input-files\\">\\n\\t    <div class=\\"backupmodxWidget__downloadLink\\" download><i class=\\"backupmodxWidget__downloadIcon icon icon-zip\\"><\\/i> Files <i class=\\"backupmodxWidget__downloadIcon--download icon icon-check\\"><\\/i><\\/div>\\n\\t<\\/label>\\n\\t<label class=\\"backupmodxWidget__selectBox\\">\\n\\t    <input type=\\"checkbox\\" name=\\"database\\" value=\\"1\\" id=\\"backupmodx-input-database\\">\\n\\t    <div class=\\"backupmodxWidget__downloadLink\\" download><i class=\\"backupmodxWidget__downloadIcon icon icon-sql\\"><\\/i> Database <i class=\\"backupmodxWidget__downloadIcon--download icon icon-check\\"><\\/i><\\/div>\\n\\t<\\/label>\\n\\n    <label class=\\"backupmodxWidget__textBox\\">\\n        <p>Add a readme file: <span style=\\"color: grey;\\">(txt-file)<\\/span><\\/p>\\n\\t    <textarea class=\\"backupmodxWidget__textarea\\" name=\\"note\\" placeholder=\\"Type your optional notes here...\\" id=\\"backupmodx-input-note\\"><\\/textarea>\\n    <\\/label>\\n\\n    <input class=\\"x-btn x-btn-small x-btn-icon-small-left primary-button x-btn-noicon\\" type=\\"submit\\" name=\\"backupmodx\\" value=\\"Backup Site!\\">\\n    <a class=\\"backupmodxWidget__restoreLink\\" onclick=\\"restoreBackupModx();\\">Restore a Backup<\\/a>\\n<\\/form>\\n\\n\\n<script type=\\"text\\/javascript\\">\\n    [[+backup:isnot=``:then=`\\n        Ext.get(\'backupmodx-form-backup\').addClass(\'hide\');\\n        var files = Ext.decode(\'[[+backup]]\');\\n        templatingFiles(files.files);\\n        Ext.get(\'backupmodx-form-download\').addClass(\'show\');\\n    `:else=``]]\\n\\n\\n\\t\\/\\/ Set longer timeout limit for Ajax\\n    Ext.Ajax.timeout = 120000;\\n\\n\\n    \\/\\/ * * * * * * * * * * * * * * * * * * * * * * * * *\\n\\t\\/\\/ * Templating Files\\n\\t\\/\\/ *\\n\\t\\/\\/ *\\n    function templatingFiles(files) {\\n        var tpl = new Ext.XTemplate(\\n            \'<tpl>\',\\n            \'<div><a class=\\"backupmodxWidget__downloadLink\\" href=\\"[[++site_url]][[+assetsurl]]components\\/backupmodx\\/download\\/download.php?file={filename}&folder={name}\\" download><i class=\\"backupmodxWidget__downloadIcon icon icon-{icon}\\"><\\/i> {label} <i>({size} MB)<\\/i> <i class=\\"backupmodxWidget__downloadIcon--download icon icon-download\\"><\\/i><\\/a><\\/div>\',\\n            \'<\\/tpl>\'\\n        );\\n\\n        files.database[\'icon\'] = \'sql\';\\n        files.database[\'label\'] = \'Database\';\\n\\n        files.files[\'icon\'] = \'zip\';\\n        files.files[\'label\'] = \'Files\';\\n\\n        files.note[\'icon\'] = \'txt\';\\n        files.note[\'label\'] = \'Note\';\\n\\n        if (files.database != \\"\\") { tpl.overwrite(Ext.get(\'backupmodx-download-container\'), files.database); }\\n        if (files.files != \\"\\") { tpl.append(Ext.get(\'backupmodx-download-container\'), files.files); }\\n        if (files.note != \\"\\") { tpl.append(Ext.get(\'backupmodx-download-container\'), files.note); }\\n    }\\n\\n\\n    \\/\\/ * * * * * * * * * * * * * * * * * * * * * * * * *\\n\\t\\/\\/ * Backup MODX\\n\\t\\/\\/ *\\n\\t\\/\\/ *\\n    function backupMODX() {\\n\\n        Ext.get(\'backupmodx-form-backup\').addClass(\'hide\');\\n        Ext.get(\'backupmodx-spinner\').addClass(\'show\');\\n\\n        Ext.Ajax.request({\\n            url: \'..\\/[[+assetsurl]]components\\/backupmodx\\/connector.php\',\\n            params: {\\n                action: \'backup\',\\n                database: document.getElementById(\\"backupmodx-input-database\\").checked,\\n                files: document.getElementById(\\"backupmodx-input-files\\").checked,\\n                note: document.getElementById(\\"backupmodx-input-note\\").value\\n            },\\n            success: function(response, opts){\\n                \\/\\/ Decode JSON\\n                var data = Ext.decode(response.responseText);\\n\\n                templatingFiles(data.results.files);\\n\\n                Ext.get(\'backupmodx-spinner\').removeClass(\'show\');\\n                Ext.get(\'backupmodx-form-download\').addClass(\'show\');\\n\\n            },\\n            failure: function(response, opts) {\\n                alert(\'Error: Failing AJAX...\');\\n            }\\n        });\\n    }\\n\\n\\n\\n    \\/\\/ * * * * * * * * * * * * * * * * * * * * * * * * *\\n\\t\\/\\/ * Restore Backups\\n\\t\\/\\/ *\\n\\t\\/\\/ *\\n    function restoreBackupModx() {\\n        Ext.get(\'backupmodx-form-backup\').addClass(\'hide\').removeClass(\'show\');\\n        Ext.get(\'backupmodx-form-download\').addClass(\'hide\').removeClass(\'show\');\\n        Ext.get(\'backupmodx-form-restore\').addClass(\'show\');\\n\\n        Ext.Ajax.request({\\n            url: \'..\\/[[+assetsurl]]components\\/backupmodx\\/connector.php\',\\n            params: {\\n                action: \'getbackups\'\\n            },\\n            success: function(response, opts){\\n                \\/\\/ Decode JSON\\n                var data = Ext.decode(response.responseText);\\n\\n                var files = data.results;\\n\\n                var tpl = new Ext.XTemplate(\\n                    \'<tpl for=\\".\\">\',\\n                    \'<div class=\\"backupmodxWidget__restoreItem\\">\',\\n                    \'<div><strong>{date_format}<\\/strong> | {note}<\\/div>\',\\n                    \'<label class=\\"backupmodxWidget__selectBox\\">\',\\n            \\t    \'<input type=\\"radio\\" name=\\"database\\" value=\\"{name}\\">\',\\n                \\t\'<div class=\\"backupmodxWidget__downloadLink\\" download><i class=\\"backupmodxWidget__downloadIcon icon icon-sql\\"><\\/i> Database <i class=\\"backupmodxWidget__downloadIcon--download icon icon-check\\"><\\/i><\\/div>\',\\n                \\t\'<\\/label>\',\\n                    \'<\\/div>\',\\n                    \'<\\/tpl>\'\\n                );\\n\\n                if (files != \\"\\") {\\n                    tpl.overwrite(Ext.get(\'backupmodx-restore-container\'), files);\\n                }\\n\\n            },\\n            failure: function(response, opts) {\\n                alert(\'Error: Failing AJAX...\');\\n            }\\n        });\\n    }\\n\\n\\n\\n<\\/script>\\n","locked":0,"properties":null,"static":0,"static_file":"","content":"<link rel=\\"stylesheet\\" type=\\"text\\/css\\" href=\\"[[++site_url]][[+assetsurl]]components\\/backupmodx\\/css\\/widget.css\\" \\/>\\n\\n<form class=\\"hide\\" method=\\"post\\" action=\\"\\" id=\\"backupmodx-form-download\\">\\n\\t<h3 style=\\"color:grey\\">Backup Finished!<\\/h3>\\n\\t<p>Download:<\\/p>\\n\\t<div class=\\"backupmodxWidget__downloads\\" id=\\"backupmodx-download-container\\"><\\/div>\\n\\t<input class=\\"x-btn x-btn-small x-btn-icon-small-left primary-button x-btn-noicon\\" type=\\"submit\\" name=\\"removebackupmodx\\" value=\\"Remove Backup\\">\\n    <a class=\\"backupmodxWidget__restoreLink\\" onclick=\\"restoreBackupModx();\\">Restore a Backup<\\/a>\\n<\\/form>\\n\\n<form class=\\"hide\\" method=\\"post\\" action=\\"\\" id=\\"backupmodx-form-restore\\">\\n\\t<p>Restore Backup:<\\/p>\\n    <div class=\\"backupmodxWidget__restore\\" id=\\"backupmodx-restore-container\\"><\\/div>\\n    <input class=\\"x-btn x-btn-small x-btn-icon-small-left primary-button x-btn-noicon\\" type=\\"submit\\" name=\\"restorebackupmodx\\" value=\\"Restore Backup!\\">\\n    <a href=\\"?\\" class=\\"backupmodxWidget__restoreLink\\">Cancel<\\/a>\\n<\\/form>\\n\\n<div id=\\"backupmodx-spinner\\" class=\\"backupmodxSpinner__wrapper hide\\">\\n    <div class=\\"backupmodxSpinner\\">\\n        <i class=\\"icon icon-modx backupmodxSpinner__icon\\"><\\/i>\\n        <i class=\\"icon icon-modx backupmodxSpinner__icon\\"><\\/i>\\n        <i class=\\"icon icon-modx backupmodxSpinner__icon\\"><\\/i>\\n    <\\/div>\\n    <center>\\n        <h3>Backup MODX<\\/h3>\\n        <p>Backup is in progress.<\\/p>\\n    <\\/center>\\n<\\/div>\\n\\n\\n<form onsubmit=\\"event.preventDefault(); backupMODX();\\" id=\\"backupmodx-form-backup\\">\\n\\t<p>Backup your MODX-Site:<\\/p>\\n\\t<label class=\\"backupmodxWidget__selectBox\\">\\n\\t    <input type=\\"checkbox\\" name=\\"files\\" value=\\"1\\" id=\\"backupmodx-input-files\\">\\n\\t    <div class=\\"backupmodxWidget__downloadLink\\" download><i class=\\"backupmodxWidget__downloadIcon icon icon-zip\\"><\\/i> Files <i class=\\"backupmodxWidget__downloadIcon--download icon icon-check\\"><\\/i><\\/div>\\n\\t<\\/label>\\n\\t<label class=\\"backupmodxWidget__selectBox\\">\\n\\t    <input type=\\"checkbox\\" name=\\"database\\" value=\\"1\\" id=\\"backupmodx-input-database\\">\\n\\t    <div class=\\"backupmodxWidget__downloadLink\\" download><i class=\\"backupmodxWidget__downloadIcon icon icon-sql\\"><\\/i> Database <i class=\\"backupmodxWidget__downloadIcon--download icon icon-check\\"><\\/i><\\/div>\\n\\t<\\/label>\\n\\n    <label class=\\"backupmodxWidget__textBox\\">\\n        <p>Add a readme file: <span style=\\"color: grey;\\">(txt-file)<\\/span><\\/p>\\n\\t    <textarea class=\\"backupmodxWidget__textarea\\" name=\\"note\\" placeholder=\\"Type your optional notes here...\\" id=\\"backupmodx-input-note\\"><\\/textarea>\\n    <\\/label>\\n\\n    <input class=\\"x-btn x-btn-small x-btn-icon-small-left primary-button x-btn-noicon\\" type=\\"submit\\" name=\\"backupmodx\\" value=\\"Backup Site!\\">\\n    <a class=\\"backupmodxWidget__restoreLink\\" onclick=\\"restoreBackupModx();\\">Restore a Backup<\\/a>\\n<\\/form>\\n\\n\\n<script type=\\"text\\/javascript\\">\\n    [[+backup:isnot=``:then=`\\n        Ext.get(\'backupmodx-form-backup\').addClass(\'hide\');\\n        var files = Ext.decode(\'[[+backup]]\');\\n        templatingFiles(files.files);\\n        Ext.get(\'backupmodx-form-download\').addClass(\'show\');\\n    `:else=``]]\\n\\n\\n\\t\\/\\/ Set longer timeout limit for Ajax\\n    Ext.Ajax.timeout = 120000;\\n\\n\\n    \\/\\/ * * * * * * * * * * * * * * * * * * * * * * * * *\\n\\t\\/\\/ * Templating Files\\n\\t\\/\\/ *\\n\\t\\/\\/ *\\n    function templatingFiles(files) {\\n        var tpl = new Ext.XTemplate(\\n            \'<tpl>\',\\n            \'<div><a class=\\"backupmodxWidget__downloadLink\\" href=\\"[[++site_url]][[+assetsurl]]components\\/backupmodx\\/download\\/download.php?file={filename}&folder={name}\\" download><i class=\\"backupmodxWidget__downloadIcon icon icon-{icon}\\"><\\/i> {label} <i>({size} MB)<\\/i> <i class=\\"backupmodxWidget__downloadIcon--download icon icon-download\\"><\\/i><\\/a><\\/div>\',\\n            \'<\\/tpl>\'\\n        );\\n\\n        files.database[\'icon\'] = \'sql\';\\n        files.database[\'label\'] = \'Database\';\\n\\n        files.files[\'icon\'] = \'zip\';\\n        files.files[\'label\'] = \'Files\';\\n\\n        files.note[\'icon\'] = \'txt\';\\n        files.note[\'label\'] = \'Note\';\\n\\n        if (files.database != \\"\\") { tpl.overwrite(Ext.get(\'backupmodx-download-container\'), files.database); }\\n        if (files.files != \\"\\") { tpl.append(Ext.get(\'backupmodx-download-container\'), files.files); }\\n        if (files.note != \\"\\") { tpl.append(Ext.get(\'backupmodx-download-container\'), files.note); }\\n    }\\n\\n\\n    \\/\\/ * * * * * * * * * * * * * * * * * * * * * * * * *\\n\\t\\/\\/ * Backup MODX\\n\\t\\/\\/ *\\n\\t\\/\\/ *\\n    function backupMODX() {\\n\\n        Ext.get(\'backupmodx-form-backup\').addClass(\'hide\');\\n        Ext.get(\'backupmodx-spinner\').addClass(\'show\');\\n\\n        Ext.Ajax.request({\\n            url: \'..\\/[[+assetsurl]]components\\/backupmodx\\/connector.php\',\\n            params: {\\n                action: \'backup\',\\n                database: document.getElementById(\\"backupmodx-input-database\\").checked,\\n                files: document.getElementById(\\"backupmodx-input-files\\").checked,\\n                note: document.getElementById(\\"backupmodx-input-note\\").value\\n            },\\n            success: function(response, opts){\\n                \\/\\/ Decode JSON\\n                var data = Ext.decode(response.responseText);\\n\\n                templatingFiles(data.results.files);\\n\\n                Ext.get(\'backupmodx-spinner\').removeClass(\'show\');\\n                Ext.get(\'backupmodx-form-download\').addClass(\'show\');\\n\\n            },\\n            failure: function(response, opts) {\\n                alert(\'Error: Failing AJAX...\');\\n            }\\n        });\\n    }\\n\\n\\n\\n    \\/\\/ * * * * * * * * * * * * * * * * * * * * * * * * *\\n\\t\\/\\/ * Restore Backups\\n\\t\\/\\/ *\\n\\t\\/\\/ *\\n    function restoreBackupModx() {\\n        Ext.get(\'backupmodx-form-backup\').addClass(\'hide\').removeClass(\'show\');\\n        Ext.get(\'backupmodx-form-download\').addClass(\'hide\').removeClass(\'show\');\\n        Ext.get(\'backupmodx-form-restore\').addClass(\'show\');\\n\\n        Ext.Ajax.request({\\n            url: \'..\\/[[+assetsurl]]components\\/backupmodx\\/connector.php\',\\n            params: {\\n                action: \'getbackups\'\\n            },\\n            success: function(response, opts){\\n                \\/\\/ Decode JSON\\n                var data = Ext.decode(response.responseText);\\n\\n                var files = data.results;\\n\\n                var tpl = new Ext.XTemplate(\\n                    \'<tpl for=\\".\\">\',\\n                    \'<div class=\\"backupmodxWidget__restoreItem\\">\',\\n                    \'<div><strong>{date_format}<\\/strong> | {note}<\\/div>\',\\n                    \'<label class=\\"backupmodxWidget__selectBox\\">\',\\n            \\t    \'<input type=\\"radio\\" name=\\"database\\" value=\\"{name}\\">\',\\n                \\t\'<div class=\\"backupmodxWidget__downloadLink\\" download><i class=\\"backupmodxWidget__downloadIcon icon icon-sql\\"><\\/i> Database <i class=\\"backupmodxWidget__downloadIcon--download icon icon-check\\"><\\/i><\\/div>\',\\n                \\t\'<\\/label>\',\\n                    \'<\\/div>\',\\n                    \'<\\/tpl>\'\\n                );\\n\\n                if (files != \\"\\") {\\n                    tpl.overwrite(Ext.get(\'backupmodx-restore-container\'), files);\\n                }\\n\\n            },\\n            failure: function(response, opts) {\\n                alert(\'Error: Failing AJAX...\');\\n            }\\n        });\\n    }\\n\\n\\n\\n<\\/script>\\n"}',
        'guid' => 'f47418638043d6600d944db0a7aace34',
        'native_key' => 1,
        'signature' => '80346fd08cf08742e7fc0f7520c596a8',
      ),
    ),
    'Snippets' => 
    array (
      '99d33349a71b837b68c4bbdf20d08f8a' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"BackupMODXWidget","description":"Backup MODX Dashboard widget","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * BackupMODX\\n *\\n * MODX Backup Dashboard Widget\\n *\\n *\\n * @package backupmodx\\n *\\/\\n \\n\\n\\/\\/ Returns an empty string if user shouldn\'t see the widget\\n$groups = $modx->getOption(\'groups\', $scriptProperties, \'Administrator\', true);\\nif (strpos($groups, \',\') !== false) {\\n\\t$groups = explode(\',\', $groups);\\n}\\nif (!$modx->user->isMember($groups)) {\\n\\treturn \'\';\\n} \\n\\n\\n\\/\\/ Load Class\\n$modelPath = $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/backupmodx\\/model\\/backupmodx\\/\';\\n$assetsUrl = $modx->getOption(\'assets_url\', null, MODX_ASSETS_URL);\\n$assetsUrl = substr($assetsUrl, 1);\\n$modx->loadClass(\'BackupMODX\', $modelPath, true, true);\\n\\n\\n$backupMODX = new BackupMODX($modx, $config = array());\\n\\n\\nif (isset($_POST[\'removebackupmodx\'])) {\\n\\n    $backup = $_SESSION[\'tmpActiveBackup\'];\\n    $backupMODX->removeBackup($backup[\'filename\']);\\n    \\n    unset($_SESSION[\'tmpActiveBackup\']);\\n}\\n\\nif (isset($_POST[\'restorebackupmodx\'])) {\\n\\n    $database = $_POST[\'database\'];\\n    $restorebackup = $backupMODX->restoreBackup($database);\\n    \\n    if ($restorebackup === true) {\\n        echo \'Backup was restored.\';\\n        return;\\n    }\\n}\\n\\nreturn $modx->getChunk(\'backupMODXWidget\', array(\\n    \'backup\' => is_array($_SESSION[\'tmpActiveBackup\'])? json_encode($_SESSION[\'tmpActiveBackup\']) : \'\',\\n    \'assetsurl\' => $assetsUrl,\\n));","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * BackupMODX\\n *\\n * MODX Backup Dashboard Widget\\n *\\n *\\n * @package backupmodx\\n *\\/\\n \\n\\n\\/\\/ Returns an empty string if user shouldn\'t see the widget\\n$groups = $modx->getOption(\'groups\', $scriptProperties, \'Administrator\', true);\\nif (strpos($groups, \',\') !== false) {\\n\\t$groups = explode(\',\', $groups);\\n}\\nif (!$modx->user->isMember($groups)) {\\n\\treturn \'\';\\n} \\n\\n\\n\\/\\/ Load Class\\n$modelPath = $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/backupmodx\\/model\\/backupmodx\\/\';\\n$assetsUrl = $modx->getOption(\'assets_url\', null, MODX_ASSETS_URL);\\n$assetsUrl = substr($assetsUrl, 1);\\n$modx->loadClass(\'BackupMODX\', $modelPath, true, true);\\n\\n\\n$backupMODX = new BackupMODX($modx, $config = array());\\n\\n\\nif (isset($_POST[\'removebackupmodx\'])) {\\n\\n    $backup = $_SESSION[\'tmpActiveBackup\'];\\n    $backupMODX->removeBackup($backup[\'filename\']);\\n    \\n    unset($_SESSION[\'tmpActiveBackup\']);\\n}\\n\\nif (isset($_POST[\'restorebackupmodx\'])) {\\n\\n    $database = $_POST[\'database\'];\\n    $restorebackup = $backupMODX->restoreBackup($database);\\n    \\n    if ($restorebackup === true) {\\n        echo \'Backup was restored.\';\\n        return;\\n    }\\n}\\n\\nreturn $modx->getChunk(\'backupMODXWidget\', array(\\n    \'backup\' => is_array($_SESSION[\'tmpActiveBackup\'])? json_encode($_SESSION[\'tmpActiveBackup\']) : \'\',\\n    \'assetsurl\' => $assetsUrl,\\n));"}',
        'guid' => '81e469d37cdc7a80ae053ae74cdf5164',
        'native_key' => 1,
        'signature' => '660e6a8a96f9cc8e16818ef547107b88',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'backupmodx',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"backupmodx-2.0.1-pl\\/modCategory\\/da940791384199988490f71fba093113\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"backupmodx"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"backupmodx-2.0.1-pl\\/modCategory\\/da940791384199988490f71fba093113\\/1\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"backupmodx"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"backupmodx-2.0.1-pl\\/modCategory\\/da940791384199988490f71fba093113.backupmodx.resolver.resolver","type":"php","name":"backupmodx.resolver"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '14564e7dadd27b0e1019825798fd3bde',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => 'da940791384199988490f71fba093113',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"BackupMODX","rank":0}',
);